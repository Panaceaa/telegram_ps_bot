# coding=utf-8
# coding=utf-8
import datetime
import io
from telegram.ext import Updater, filters
from telegram.ext import CommandHandler, CallbackQueryHandler, MessageHandler, ConversationHandler
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram import ParseMode
import re
import calc_ps
import db_update
import time


token = '2126898244:AAHAukk7Xh5-Z2HAwSob2jrTvd8iw5EezeQ'
updater = Updater(token, use_context=True)

START = '–ü—Ä–∏–≤–µ—Ç!üòä –í–≤–µ–¥–∏ —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏ –æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ.'
product = 'ps_growth'


def start(update, context):
    chat_id = update.message.chat.id
    updater.bot.send_message(chat_id=chat_id, text=START)
    db_update.user_data((update.message.chat.username, update.message.chat.first_name, int(update.message.chat.id), product))


def user_answer(update, context):
    chat_id = update.message.chat.id
    updater.bot.send_message(chat_id=chat_id, text='–£–∂–µ –∏—â—É üßê')
    symbol = update.message.text
    pattern = '[a-zA-z]'
    symbol = ''.join(x for x in re.findall(pattern, symbol)).upper()

    industry = calc_ps.select_database(symbol)
    ps = calc_ps.fmp_connection(symbol)
    pr = calc_ps.fmp_price(symbol)

    if industry is None:
        updater.bot.send_message(chat_id=chat_id, text=
                            "–¢–∏–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω üòø\n(–ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)\n\n"
                            "–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π.")
        db_update.user_error(chat_id, symbol, update.message.date, product)

    elif ps is None or pr is None:
        updater.bot.send_message(chat_id=chat_id, text=
                            "–í—ã—Ä—É—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ üòø\n(–ú—ã —Å–∫–æ—Ä–æ —ç—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏–º)\n\n–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π —Ç–∏–∫–µ—Ä.")
        db_update.user_error(chat_id, symbol, update.message.date, product)

    else:
        ps_forward = calc_ps.ps_industry(industry['industry'].values[0])
        rev_gr = calc_ps.fmp_revenue(symbol)
        if rev_gr is None:
            rev_gr = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
        name = industry['name'].values[0].rsplit('(')[0]
        m, gr = calc_ps.matrix(pr, ps, ps_forward, symbol)
        updater.bot.send_message(chat_id=chat_id, text=
                            f"<b>{name}</b>\n\n<b>–¶–µ–Ω–∞:</b> {round(pr, 1)} $\n\n<b>–†–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ —Å–µ–π—á–∞—Å:</b> {rev_gr} –≤ –≥–æ–¥\n\nüìä–¢–∞–±–ª–∏—Ü–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º —Ä–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ –≤ –≥–æ–¥ —á—Ç–æ–±—ã –æ–ø—Ä–∞–≤–¥–∞—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∞–∫—Ü–∏–∏, –ª–∏–±–æ –∫–æ–≥–¥–∞ –∞–∫—Ü–∏—è –ø–∞–¥–∞–µ—Ç/—Ä–∞—Å—Ç–µ—Ç –Ω–∞ 10 %\n\n<b>–ö–∞–∫ –ø–æ–Ω—è—Ç—å —Ç–∞–±–ª–∏—Ü—É:</b> –≤—ã—Ä—É—á–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ {name} –¥–æ–ª–∂–Ω–∞ –µ–∂–µ–≥–æ–¥–Ω–æ —Ä–∞—Å—Ç–∏ –Ω–∞ {gr} –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –ª–µ—Ç —á—Ç–æ–±—ã –æ–ø—Ä–∞–≤–¥–∞—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É.\n<em>(–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –∫–æ–º–ø–∞–Ω–∏—è –Ω–µ–¥–æ–æ—Ü–µ–Ω–µ–Ω–∞, –ª–∏–±–æ –∏–Ω–≤–µ—Å—Ç–æ—Ä—ã –æ–∂–∏–¥–∞—é—Ç –ø–∞–¥–µ–Ω–∏—è –≤—ã—Ä—É—á–∫–∏)</em>",
                            parse_mode=ParseMode.HTML)
        updater.bot.send_message(chat_id=chat_id, text=m, parse_mode=ParseMode.HTML)

        db_update.response_data((chat_id, symbol, None, time.mktime(update.message.date.timetuple()), product))


updater.dispatcher.add_handler(CommandHandler('start', start))
updater.dispatcher.add_handler(MessageHandler(filters.Filters.text & (~ filters.Filters.command), callback=user_answer))
updater.start_polling()
